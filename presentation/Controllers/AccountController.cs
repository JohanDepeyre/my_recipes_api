
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Application.Dto;
using Data.Model;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json.Linq;

namespace Presentation.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class AccountController : ControllerBase
    {

        private UserManager<IdentityUser> _userManager = null;
        public AccountController(UserManager<IdentityUser> userManager)
        {
            _userManager = userManager;
            
        }
        [HttpPost]
        [Route("register")]
        public async Task<IActionResult> Register(AuthenticationUsersDto authenticationUsersDto)
        {
            IActionResult result = this.BadRequest();
            var user = new IdentityUser(authenticationUsersDto.Login);
            user.Email = authenticationUsersDto.Login;
            user.UserName = authenticationUsersDto.Name;
            
            var succes = await _userManager.CreateAsync(user, authenticationUsersDto.Password);
            if (succes.Succeeded)
            {
                authenticationUsersDto.Token = this.GenerateJwtToken(user);
                result = this.Ok(authenticationUsersDto);
            }
            return result;
        }
            [HttpPost]
        public async Task<IActionResult> Login(AuthenticationUsersDto authenticationUsersDto)
        {
            IActionResult result = this.BadRequest();
            var user  = await this._userManager.FindByEmailAsync(authenticationUsersDto.Login);
            if (user != null)
            {
                var verif = await this._userManager.CheckPasswordAsync(user, authenticationUsersDto.Password);
                if (verif)
                {
                    result = this.Ok(new AuthenticationUsersDto()
                    {
                        Login = user.Email,
                        Name = user.UserName,
                        Token = GenerateJwtToken(user)
                    });
                }

            }
            return result;
        }
        #region Internal Method
        private string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.UTF8.GetBytes("cleDeGuignol2022");

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
        
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
             {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                    // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                    // but since this is a demo app we can extend it to fit our current need
                    Expires = DateTime.UtcNow.AddHours(6),
                    // here we are adding the encryption alogorithim information which will be used to decrypt our token
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
                };
           
             var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);
          

            return jwtToken;
        }

        #endregion
    }
}
